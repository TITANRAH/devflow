//TODO: CONFIGURAR ESLINT

configurar eslint 

npm i eslint-config-standard

npm i eslint-plugin-tailwindcss

npm i eslint-config-prettier

npm install eslint-plugin-import --save-dev

{
  "extends": ["next/core-web-vitals", "next/typescript","standard", "plugin:tailwindcss/recommended", "prettier"]
}

y para los imports ordenados

npm install eslint-plugin-import --save-dev 

y dejar el archivo eslint asi: 

{
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "standard",
    "plugin:tailwindcss/recommended",
    "prettier"
  ],
  "plugins": ["import"],
  "rules": {
    "import/order": [
      "error",
      {
        "groups": [
          "builtin", // Built-in types are first
          "external", // External libraries
          "internal", // Internal modules
          ["parent", "sibling"], // Parent and sibling types can be mingled together
          "index", // Then the index file
          "object" // Object imports
        ],
        "newlines-between": "always",
        "pathGroups": [
          {
            "pattern": "@app/**",
            "group": "external",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ]
  },
  "ignorePatterns": ["components/ui/**"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "no-undef": "off"
      }
    }
  ]
}



//TODO: INSTALACION DE ESLINT Y PRETTIER 

- PRETTIER CODE FORMAT 

- PRETTIER ESLINT 

- ESLINT (MICROSOFT)

LUEGO EN EL ARCHIVO DE .vscode -> settings.json


{
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "explicit",
        "source.addMissingImports": "explicit"
    },
    "prettier.tabWidth": 2,
    "prettier.useTabs": false,
    "prettier.semi": true,
    "prettier.singleQuote": false,
    "prettier.jsxSingleQuote": false,
    "prettier.trailingComma": "es5",
    "prettier.arrowParens": "always",
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "typescript.tsdk": "node_modules/typescript/lib"
}


//TODO: NEXTTHEME NO SOPORTA REACT 19

HACEMOES ESTO PARA LIDEAR CON ELLO EN EL PACKAGE JSON

 "packageManager": "npm@10.7.0",
  "overrides": {
    "react":"$react",
    "react-dom":"$react"
  }

LUEGO DE HACERLO INSTALAMOS NUEVAMENTE npm install next-themes

// TODO: INSTALAR SHADCN

npx shadcn@latest init

Ok to proceed? (y) y
✔ Preflight checks.
✔ Verifying framework. Found Next.js.
✔ Validating Tailwind CSS.
✔ Validating import alias.
✔ Which style would you like to use? › New York
✔ Which color would you like to use as the base color? › Slate
✔ Would you like to use CSS variables for theming? … no / yes
✔ Writing components.json.
✔ Checking registry.
✔ Updating tailwind.config.ts
✔ Updating app/globals.css
  Installing dependencies.

It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues (see https://ui.shadcn.com/react-19).

✔ How would you like to proceed? › Use --force
✔ Installing dependencies.
✔ Created 1 file:
  - lib/utils.ts

  instalar componente 

  npx shadcn@latest add dropdown-menu
  npx shadcn@latest add button 

// TODO: COMPONENTE SWITCH PARA EL TOGLLE DEL MODO DARK 

https://ui.shadcn.com/docs/dark-mode/next

"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}


TODO: LOS GRUPOS DE RUTAS SE REPRESETAN CON PARENTESIS Y SU LAYOUT 

(root)
(auth)


TODO: NEXTAUTH INSTALACION

SEGUIR PASOS:

https://authjs.dev/getting-started/installation?framework=Next.js

TODO: INSTALAMOS TOAST SHADCN

npx shadcn@latest add toast

TODO: LOGIN CON GOOGLE 

https://console.cloud.google.com

1. CREAR PROYECTO
2. SELECCIONAR PROYECTO CREADO
3. PANTALLA DE CONSENTIMIENTO OAUTH
4. SELECCIONAR EXTERNO Y DARLE A CREAR
5. INGREAR NOMBRE DE APP 
6. SELECCIONAR MAIL 
7. SELECCIONAR IMAGEN
8. AGREGAR http:localhost:3000 en las 3 casillas 
9. AGREGAR CORREO PERSONAL Y DARLE A GUARDAR Y CONTINUAR HASTA QUE DIGA VOLVER A PANEL
10. PULSAR CREDENTIALS O CREDENCIALES
11. PULSAR AGREGAR CREDENCIALES Y SLEECCIONAR OAUTH ID
12. TIPO DE APP : WEB 
13. DARLE NOMBRE : Clien Web | DevFlow
14. Orígenes autorizados de JavaScript: http://localhost:3000
15. URI de redireccionamiento autorizados: http://localhost:3000/api/auth/callback/google
16. DARLE A CREAR
17. COPIAR CREDENCIALES Y LLEVARLAS AL ENV.
18. IR AL ARCHIVO AUTH Y PONER GOOGLE EN LOS PROVIDER


TODO: LOGIN CON GITHUB 

1. IR A GITHUB
2. IR A SETTINGS PULSANDO EL AVATAR
3. IR A OAUTH APPS
4. CREAR NUEVA APP OAUTH
5. EN APLICATION NAME http://localhost:3000
6. EN AUTHORIZATION CALLBACK http://localhost:3000/api/auth/callback/GITHUB
7. COPIAR CLIENT ID Y LLEVARLO AL ENV
8. GENERAR SECRET 
9. COPIAR SECRET Y LLEVARLO AL ENV EJ: AUTH_GITHUB_SECRET 
10.IR A ARCHIVO AUTH Y PONER GITHUB EN LOS PROVIDER